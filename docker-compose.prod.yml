# Production Docker Compose configuration
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # Backend production configuration
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        BUILD_ENV: production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      # Remove source code mount for security
      - backend_logs:/app/logs:rw
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend production build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        BUILD_ENV: production
    volumes:
      # Remove source code mount
      - frontend_dist:/app/dist:rw
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Database production configuration
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bigkahuna_hr}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data:rw
      - ./backups:/backups:rw
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Don't expose port in production (internal only)
    # ports: []

  # Redis production configuration
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes 
      --save 900 1 
      --save 300 10 
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data:rw
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    # Don't expose port in production
    # ports: []

  # Nginx production configuration
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx:rw
      - frontend_dist:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bigkahuna_hr}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups:rw
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        chmod +x /backup.sh &&
        crond -f
      "
    restart: always
    depends_on:
      - postgres

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  frontend_dist:
    driver: local

# Production network with custom subnet
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16 