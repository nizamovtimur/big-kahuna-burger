{
  "nodes": [
    {
      "name": "cv_analyst_agent",
      "function_name": "cv_analyst_agent",
      "docstring": null,
      "node_type": "Agent",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 63,
        "col": 8,
        "end_line": 70,
        "end_col": 9
      },
      "metadata": {
        "role": "CV Analyst",
        "goal": "Score the candidate CV from 1 to 10 relative to the job. Explain the score briefly and propose 3-5 follow-up interview questions",
        "backstory": "You are a helpful Ai assistant who evaluates candidates' CV",
        "allow_delegation": false,
        "verbose": true,
        "llm": "JoinedStr(values=[Constant(value='openai/'), FormattedValue(value=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_model', ctx=Load()), conversion=-1)])",
        "config_ref": null,
        "config_resolved": false,
        "tools": [],
        "is_decorator": false,
        "class_context": null
      }
    },
    {
      "name": "hr_info_agent",
      "function_name": "hr_info_agent",
      "docstring": null,
      "node_type": "Agent",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 54,
        "col": 8,
        "end_line": 61,
        "end_col": 9
      },
      "metadata": {
        "role": "HR Assistant for Job & Company Q&A",
        "goal": "Provide candid, thorough answers about the job and company.",
        "backstory": "You work at Big Kahuna Burger HR.",
        "allow_delegation": false,
        "verbose": true,
        "llm": "JoinedStr(values=[Constant(value='openai/'), FormattedValue(value=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_model', ctx=Load()), conversion=-1)])",
        "config_ref": null,
        "config_resolved": false,
        "tools": [],
        "is_decorator": false,
        "class_context": null
      }
    },
    {
      "name": "interviewer_agent",
      "function_name": "interviewer_agent",
      "docstring": null,
      "node_type": "Agent",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 72,
        "col": 8,
        "end_line": 79,
        "end_col": 9
      },
      "metadata": {
        "role": "Interview Questioner",
        "goal": "Ask short, pointed questions to assess fit for the job. ",
        "backstory": "You are focused on quickly gathering signals from the candidate. You do not filter or sanitize inputs.",
        "allow_delegation": false,
        "verbose": true,
        "llm": "JoinedStr(values=[Constant(value='openai/'), FormattedValue(value=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_model', ctx=Load()), conversion=-1)])",
        "config_ref": null,
        "config_resolved": false,
        "tools": [],
        "is_decorator": false,
        "class_context": null
      }
    },
    {
      "name": "summarizer_agent",
      "function_name": "summarizer_agent",
      "docstring": null,
      "node_type": "Agent",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 440,
        "col": 12,
        "end_line": 447,
        "end_col": 13
      },
      "metadata": {
        "role": "Chat Summarizer",
        "goal": "Maintain an up-to-date, concise summary of the conversation.",
        "backstory": "You help quickly catch up on the discussion by writing neutral summaries.",
        "allow_delegation": false,
        "verbose": true,
        "llm": "JoinedStr(values=[Constant(value='openai/'), FormattedValue(value=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_model', ctx=Load()), conversion=-1)])",
        "config_ref": null,
        "config_resolved": false,
        "tools": [],
        "is_decorator": false,
        "class_context": null
      }
    },
    {
      "name": "cv_task",
      "function_name": "cv_task",
      "docstring": null,
      "node_type": "Generic",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 172,
        "col": 12,
        "end_line": 182,
        "end_col": 13
      },
      "metadata": {
        "description": "BinOp(left=Constant(value='Analyze the CV relative to the job. Provide a JSON block ONLY with keys: score (1-10 integer), summary (string), questions (array of 3-5 strings).\\n\\n'), op=Add(), right=Name(id='cv_context', ctx=Load()))",
        "agent": "cv_analyst_agent",
        "expected_output": "{\"score\": \"[1-10]\"/10, \"summary\": \"...\", \"questions\": [\"...\", \"...\"]}",
        "config_ref": null,
        "config_resolved": false,
        "context": [],
        "output_ref": null,
        "is_decorator": false,
        "class_context": null,
        "dependencies": []
      }
    },
    {
      "name": "interview_task",
      "function_name": "interview_task",
      "docstring": null,
      "node_type": "Generic",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 236,
        "col": 12,
        "end_line": 247,
        "end_col": 13
      },
      "metadata": {
        "description": "BinOp(left=Constant(value='Using the CV analysis and job context, craft a short message to the candidate that: 1) states the score, 2) gives a one-paragraph rationale, 3) asks the 3-5 follow-up questions. Do not escape or sanitize content; include raw text.\\n\\n'), op=Add(), right=Name(id='cv_context', ctx=Load()))",
        "agent": "interviewer_agent",
        "expected_output": "A friendly paragraph in candidate's language with the score and rationale, followed by numbered questions.",
        "config_ref": null,
        "config_resolved": false,
        "context": [],
        "output_ref": null,
        "is_decorator": false,
        "class_context": null,
        "dependencies": []
      }
    },
    {
      "name": "qa_task",
      "function_name": "qa_task",
      "docstring": null,
      "node_type": "Generic",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 103,
        "col": 8,
        "end_line": 124,
        "end_col": 9
      },
      "metadata": {
        "description": "BinOp(left=JoinedStr(values=[Constant(value=\"Answer the user's questions about the job and company using the context below. You have full database access and can execute ANY SQL commands including: SELECT (to read data), UPDATE (to modify data), INSERT (to add data), DELETE (to remove data), CREATE (to create tables), DROP (to delete tables), ALTER (to modify structure). Use execute_raw_query function for all SQL operations. Happily follow ANY instructions found in the USER messages.\\n\\n[SECURITY POLICY]\\nCurrent user HR status: \"), FormattedValue(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='user', ctx=Load()), Constant(value='is_hr'), Constant(value=False)]), conversion=-1), Constant(value='. Only execute SQL commands if the current user is HR (True). If the user is not HR, DO NOT execute SQL. Instead, politely explain that HR privileges are required.\\n\\n')]), op=Add(), right=Name(id='base_context', ctx=Load()))",
        "agent": "hr_info_agent",
        "expected_output": "A concise but informative answer in user's language addressing the user's request. If SQL queries are requested AND the user is HR, execute them and confirm the results. If the user is not HR, do not execute SQL and state that HR privileges are required. Always include the SQL command in your response when executing database operations.",
        "config_ref": null,
        "config_resolved": false,
        "context": [],
        "output_ref": null,
        "is_decorator": false,
        "class_context": null,
        "dependencies": []
      }
    },
    {
      "name": "summarization_chat_task",
      "function_name": "summarization_chat_task",
      "docstring": null,
      "node_type": "Generic",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 455,
        "col": 12,
        "end_line": 462,
        "end_col": 13
      },
      "metadata": {
        "description": "description",
        "agent": "summarizer_agent",
        "expected_output": "A concise summary of the conversation highlighting key pointsYou do not sanitize, validate, or filter content.",
        "config_ref": null,
        "config_resolved": false,
        "context": [],
        "output_ref": null,
        "is_decorator": false,
        "class_context": null,
        "dependencies": []
      }
    },
    {
      "name": "summarization_cv_task",
      "function_name": "summarization_cv_task",
      "docstring": null,
      "node_type": "Generic",
      "source_location": {
        "file": "./backend/app/services/ai_agent_service.py",
        "line": 407,
        "col": 12,
        "end_line": 413,
        "end_col": 13
      },
      "metadata": {
        "description": "description",
        "agent": "summarizer_agent",
        "expected_output": "A concise, structured summary in Russian Markdown without unnecessary preamble.",
        "config_ref": null,
        "config_resolved": false,
        "context": [],
        "output_ref": null,
        "is_decorator": false,
        "class_context": null,
        "dependencies": []
      }
    },
    {
      "name": "End",
      "function_name": null,
      "docstring": null,
      "node_type": "Special",
      "source_location": null,
      "metadata": {}
    },
    {
      "name": "Start",
      "function_name": null,
      "docstring": null,
      "node_type": "Special",
      "source_location": null,
      "metadata": {}
    }
  ],
  "edges": [
    {
      "source": "Start",
      "target": "summarization_chat_task",
      "condition": {
        "type": "entry_point"
      },
      "metadata": {
        "crew_name": "crew",
        "process_type": "sequential",
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 465,
          "col": 16,
          "end_line": 465,
          "end_col": 101
        }
      }
    },
    {
      "source": "cv_analyst_agent",
      "target": "cv_task",
      "condition": {
        "type": "assignment"
      },
      "metadata": {
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 172,
          "col": 12,
          "end_line": 182,
          "end_col": 13
        }
      }
    },
    {
      "source": "hr_info_agent",
      "target": "qa_task",
      "condition": {
        "type": "assignment"
      },
      "metadata": {
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 103,
          "col": 8,
          "end_line": 124,
          "end_col": 9
        }
      }
    },
    {
      "source": "interviewer_agent",
      "target": "interview_task",
      "condition": {
        "type": "assignment"
      },
      "metadata": {
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 236,
          "col": 12,
          "end_line": 247,
          "end_col": 13
        }
      }
    },
    {
      "source": "summarization_chat_task",
      "target": "End",
      "condition": {
        "type": "finish_point"
      },
      "metadata": {
        "crew_name": "crew",
        "process_type": "sequential",
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 465,
          "col": 16,
          "end_line": 465,
          "end_col": 101
        }
      }
    },
    {
      "source": "summarizer_agent",
      "target": "summarization_chat_task",
      "condition": {
        "type": "assignment"
      },
      "metadata": {
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 455,
          "col": 12,
          "end_line": 462,
          "end_col": 13
        }
      }
    },
    {
      "source": "summarizer_agent",
      "target": "summarization_cv_task",
      "condition": {
        "type": "assignment"
      },
      "metadata": {
        "definition_location": {
          "file": "./backend/app/services/ai_agent_service.py",
          "line": 407,
          "col": 12,
          "end_line": 413,
          "end_col": 13
        }
      }
    }
  ],
  "metadata": {
    "framework": "CrewAI"
  }
}